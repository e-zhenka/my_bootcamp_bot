import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain
from datetime import datetime
import sys
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app.config import config
from app.database import DatabaseManager

class ChatApp:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        retry_count = 5
        for i in range(retry_count):
            try:
                self.db = DatabaseManager()
                break
            except Exception as e:
                if i == retry_count - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                    raise e
                time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

        self._init_session_state()
        self._init_page()
        
    def _init_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if "api_key" not in st.session_state:
            st.session_state.api_key = None
            st.session_state.session_id = None
            st.session_state.chat_initialized = False
            st.session_state.messages = []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not st.session_state.session_id:
            st.session_state.session_id = str(datetime.utcnow().timestamp())
            try:
                st.session_state.messages = self.db.load_chat_history(st.session_state.session_id)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}")
                st.session_state.messages = []

    def _init_page(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        st.set_page_config(
            page_title="Llama-3 Chat",
            page_icon="ü§ñ",
            layout="wide" if config.app.debug else "centered"
        )

    def _initialize_chat(self, api_key: str, messages: list) -> ConversationChain:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
        try:
            model = ChatOpenAI(
                api_key=api_key,
                base_url=config.api.base_url,
                model=config.api.model
            )
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
            memory = ConversationBufferMemory()
            conversation = ConversationChain(llm=model, memory=memory)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–∞–º—è—Ç—å
            for msg in messages:
                if msg["role"] == "user":
                    memory.chat_memory.add_user_message(msg["content"])
                elif msg["role"] == "assistant":
                    memory.chat_memory.add_ai_message(msg["content"])
            
            return conversation
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: {str(e)}")
            return None

    def _show_debug_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if config.app.debug:
            with st.sidebar.expander("üîß Debug Info"):
                st.write("Session ID:", st.session_state.session_id)
                st.write("Chat Initialized:", st.session_state.chat_initialized)
                st.write("Messages Count:", len(st.session_state.messages))

    def _show_sidebar(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        with st.sidebar:
            st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
                self.db.clear_chat_history(st.session_state.session_id)
                st.session_state.messages = []
                st.session_state.chat_initialized = False
                st.rerun()

            # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self._show_debug_info()

    def _handle_api_key_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞"""
        st.title("üîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        api_key = st.text_input("OpenAI API –∫–ª—é—á:", type="password")
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
            if api_key:
                st.session_state.api_key = api_key
                st.success("‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                st.rerun()
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")

    def _handle_chat(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞"""
        st.title("üí¨ –ß–∞—Ç —Å Llama-3")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        if not st.session_state.chat_initialized:
            conversation = self._initialize_chat(st.session_state.api_key, st.session_state.messages)
            if conversation:
                st.session_state.conversation = conversation
                st.session_state.chat_initialized = True
            else:
                st.session_state.api_key = None
                st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.write(message["content"])
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.save_message(st.session_state.session_id, "user", prompt)
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.write(prompt)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            with st.chat_message("assistant"):
                try:
                    response = st.session_state.conversation.predict(input=prompt)
                    st.write(response)
                    self.db.save_message(st.session_state.session_id, "assistant", response)
                    st.session_state.messages.append({"role": "assistant", "content": response})
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            self._show_sidebar()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if not st.session_state.api_key:
                self._handle_api_key_input()
            else:
                self._handle_chat()

        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            if config.app.debug:
                st.exception(e)

if __name__ == "__main__":
    app = ChatApp()
    app.run() 